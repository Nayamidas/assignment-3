#1-Create a simple class Person with name and age as attributes...
#class Person:
#    def _init_(self, name, age):
#        self.name = name
#        self.age = age
#p1 = Person("Nayami", 21)
#print("Name:", p1.name)
#print("Age:", p1.age)

#2-Add a method to the Person class that prints a greeting...
#class Person:
#    def _init_(self, name, age):
#        self.name = name
#        self.age = age
#    def greet(self):
#        print(f"Hello, my name is {self.name} and I am {self.age} years old.")
#p1 = Person("Nayami", 21)
#p1.greet()

#3-Create a class with a class variable and instance variable...
#class Dog:
#    eat="bones"
#    def _init_(self, name, age):
#        self.name = name
#        self.age = age
#d1 = Dog("Buddy", 3)
#print(f"{d1.name} eats {d1.eat} aged {d1.age}")

#4-Create a private attribute in a class and access it using a method...
#class Person:
#    def _init_(self, name, age):
#        self.__name = name  #private
#        self.age = age
#    def get_name(self):
#        return self.__name
#p1 = Person("Nayami", 21)
#print("Name:", p1.get_name())
#print("Age:", p1.age)

#5-Create a class with a method that returns the square of a number...
#class numbers:
#    def square(self, number):
#        return number * number
#m = numbers()
#result = m.square(5)
#print("Square is:", result)

#6-Create two objects of a class and demonstrate that they are independent...
# class person:
#     def _init_(self, name, age):
#         self.name=name
#         self.age=age
#     def get_age(self):
#         return self.age
# p1 = person("Nayami", 21)
# print("Name:",p1.name,"Age:", p1.age)
# p2 = person("arpita", 25)
# print("Name:",p2.name,"Age:",p2.age)

#7-Create a class and use a method to set its attributes...
# class MyClass:
#     def _init_(self):
#         self.attribute1 = None
#         self.attribute2 = None
#     def set_attributes(self, value1, value2):
#         self.attribute1 = value1
#         self.attribute2 = value2
# my_object = MyClass()
# my_object.set_attributes("Hello","Nayami")
# print(my_object.attribute1,my_object.attribute2)

#8-Demonstrate use of isinstance() with a class...
# class MyClass:
#     pass
# obj = MyClass()
# result = isinstance(obj, MyClass)
# print(f"Is obj an instance of MyClass? {result}")
# result = isinstance(obj, int)
# print(f"Is obj an instance of int? {result}")

#9-Demonstrate single inheritance in Python...
# class Animal:
#     def _init_(self, name):
#         self.name = name
#     def speak(self):
#         print("Generic animal sound")
# class Dog(Animal):
#     def _init_(self, name, breed):
#         super()._init_(name)
#         self.breed = breed
#     def speak(self):
#         print("Woof!")
# animal = Animal("Generic")
# dog = Dog("Buddy", "Golden Retriever")
# animal.speak()
# dog.speak()
# print(dog.name)

#10- Create a base class and derive two child classes with different methods(multilevel inheritance).
# class Animal:
#     def _init_(self, name):
#         self.name = name
#     def speak(self):
#         print("Generic animal sound")
# class Dog(Animal):
#     def _init_(self, name, breed):
#         super()._init_(name)
#         self.breed = breed
#     def speak(self):
#         print("Woof!")
#     def fetch(self):
#         print("Dog is fetching")
# class Cat(Animal):
#     def _init_(self, name, color):
#         super()._init_(name)
#         self.color = color
#     def speak(self):
#         print("Meow!")
#     def purr(self):
#         print("Cat is purring")
# animal = Animal("Generic Animal")
# dog = Dog("Buddy", "Golden Retriever")
# cat = Cat("Whiskers", "Black")
# animal.speak() 
# dog.speak()   
# dog.fetch()  
# cat.speak()    
# cat.purr()

#11-Demonstrate method overriding in inheritance...
# class Parent(): 
# 	def _init_(self): 
# 		self.value = "Parent class method call"
# 	def show(self): 
# 		print(self.value) 
# class Child(Parent): 
# 	def _init_(self): 
# 		super()._init_()
# 		self.value = "Child class method call"
# 	def show(self): 
# 		print(self.value) 
# obj1 = Parent() 
# obj2 = Child() 
# obj1.show() 
# obj2.show()

#12-Use super() to call a parent class method...
# class Parent:
#     def _init_(self, name):
#         self.name = name
#     def display(self):
#         print(f"Parent name: {self.name}")
# class Child(Parent):
#     def _init_(self, name, age):
#         super()._init_(name)
#         self.age = age
#     def display(self):
#         super().display()
#         print(f"Child age: {self.age}")
# child_obj = Child("Nayami", 21)
# child_obj.display()

#13-Create an abstract base class using abc module....
# from abc import ABC, abstractmethod
# class AbstractClass(ABC):
#     @abstractmethod
#     def abstract_method(self):
#         pass
#     def concrete_method(self):
#         return "This is a concrete method"
# class ConcreteClass(AbstractClass):
#     def abstract_method(self):
#         return "This is an implementation of the abstract method"
# concrete_instance = ConcreteClass()
# print(concrete_instance.abstract_method())
# print(concrete_instance.concrete_method())

#14-Demonstrate multiple inheritance in Python...
# class Engine:
#     def start(self):
#         return "Engine started"
# class Electric:
#     def charge(self):
#         return "Charging"
# class HybridCar(Engine, Electric):
#     def _init_(self, model):
#         self.model = model
#     def display(self):
#         return f"Car model: {self.model}, {self.start()}, {self.charge()}"
# my_car = HybridCar("Toyota Prius")
# print(my_car.display())

#15-Demonstrate encapsulation using getter and setter...
# class Student:
#     def _init_(self, name, age):
#         self._name = name 
#         self._age = age  
#     def get_name(self):
#         return self._name
#     def set_name(self, name):
#         self._name = name
#     def get_age(self):
#         return self._age
#     def set_age(self, age):
#         if age > 0:
#             self._age = age
#         else:
#             print("Invalid age")
# s1 = Student("Nayami", 20)
# print("Current Name:", s1.get_name())
# print("Current Age:", s1.get_age())
# s1.set_name("Arpi")
# s1.set_age(22)
# print("Updated Name:", s1.get_name())
# print("Updated Age:", s1.get_age())
# s1.set_age(-5)

#16-Write a program to demonstrate polymorphism with a common method...
# class Animal:
#     def speak(self):
#         print("Generic animal sound")
# class Dog(Animal):
#     def speak(self):
#         print("Woof!")
# class Cat(Animal):
#     def speak(self):
#         print("Meow!")
# class Cow(Animal):
#   def speak(self):
#     print("Moo!")
# def animal_sound(animal):
#     animal.speak()
# if _name_ == "_main_":
#     my_dog = Dog()
#     my_cat = Cat()
#     my_cow = Cow()
#     generic_animal = Animal()
#     animal_sound(my_dog)       
#     animal_sound(my_cat)      
#     animal_sound(my_cow)      
#     animal_sound(generic_animal)

#17- Create a class Employee with a method to display the number of employees craeted...
# class Employee:
#     emp_count = 0 
#     def _init_(self):
#         Employee.emp_count += 1  
#     @classmethod
#     def display_emp_count(cls):
#         print(f"Total employees: {cls.emp_count}")
# emp1 = Employee()
# emp2 = Employee()
# Employee.display_emp_count()  

#18-Demonstrate constructor overloading using default arguments...
# class Construrctorclass:
#     def _init_(self, a=None, b=None):
#         self.a = a
#         self.b = b
#         if a is None and b is None:
#             print("No arguments")
#         elif a is not None and b is None:
#             print(f"One argument: a = {a}")
#         elif a is not None and b is not None:
#             print(f"Two arguments: a = {a}, b = {b}")
# obj1 = Construrctorclass()
# obj2 = Construrctorclass(10)
# obj3 = Construrctorclass(10, 20)

#19-Implement a bank account system with deposit and withdrawal methods...
# class Bank:
#     def _init_(self, name, age):
#         self.name = name
#         self.age = age
#         self.balance = 0 
#     def deposit(self, amount, accno):
#         self.accno = accno
#         self.balance += amount
#         print(f"Deposited {amount}. New balance: {self.balance}")
#     def withdrawal(self, amount, accno):
#         if amount > self.balance:
#             print("Insufficient funds.")
#         else:
#             self.balance -= amount
#             print(f"Withdrew {amount}. Remaining balance: {self.balance}")
# p1 = Bank("Nayami", 24)
# p1.deposit(500, 8558595)
# p1.withdrawal(200, 8558595)

#20-Create a class Rectangle with method to calculate area and perimeter...
# class Rectangle:
#     def _init_(self, length, width):
#         self.length = length
#         self.width = width
#     def area(self):
#         return self.length * self.width
#     def perimeter(self):
#         return 2 * (self.length + self.width)
# rect1 = Rectangle(10, 5)
# print(f"Area: {rect1.area()}")
# print(f"Perimeter: {rect1.perimeter()}")
